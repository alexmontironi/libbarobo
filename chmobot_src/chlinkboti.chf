#include <mobot.h>
#include <linkbot.h>
#include <dlfcn.h>
#include <stdarg.h>
#include <array.h>

#define DEPRECATED(from, to) \
  fprintf(stdout, "Warning: The function \"%s()\" is deprecated. Please use \"%s()\"\n" , from, to)

CLinkbotI::CLinkbotI() {
  void *fptr;
  /* Here to load the dynamically loaded library if necessary.
     CMobot::g_chmobot_dlhandle is a global pointer pointing to the loaded DLL
     CMobot::g_chmobot_dlcount is a global int counting instances for all classes
     They are declared in the header file class1_ch.h for Ch space.
     */
  if(CMobot::g_chmobot_dlhandle == NULL || CMobot::g_chmobot_dlcount == 0) {
    CMobot::g_chmobot_dlhandle = dlopen("libmobot.dl", RTLD_LAZY);
    if(CMobot::g_chmobot_dlhandle == NULL) {
      printf("Error: %s(): dlopen(): %s\n", __class_func__, dlerror());
      return;
    }
  }
  /* to get the address by function name */
  fptr = dlsym(CMobot::g_chmobot_dlhandle, "CLinkbotI_CLinkbotI_chdl");
  if(fptr == NULL) {
    printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
    return;
  }
  /* to call the chdl function in dynamically loaded
     library by address */
  dlrunfun(fptr, NULL, NULL);
  CMobot::g_chmobot_dlcount++; // to increase count of instance
}

CLinkbotI::~CLinkbotI() {
  void *fptr;
  fptr = dlsym(CMobot::g_chmobot_dlhandle, "CLinkbotI_dCLinkbotI_chdl");
  if(fptr == NULL) {
    printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
    return;
  }
  /* call the chdl function in DLL by address */
  dlrunfun(fptr, NULL, NULL, this);
  CMobot::g_chmobot_dlcount--; // to decrease count of instance
  if(CMobot::g_chmobot_dlcount <= 0 && CMobot::g_chmobot_dlhandle != NULL) {
    if(dlclose(CMobot::g_chmobot_dlhandle)!=0)
      printf("Error: %s(): dlclose(): %s\n", __class_func__, dlerror());
  }
}

int CLinkbotI::driveAccelTimeNB(double radius, double acceleration, double time) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_driveAccelTimeNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, radius, acceleration, time);
    return retval;
}

/*Cycloid acceleration*/
int CLinkbotI::accelJointCycloidalNB(int id, double angle, double time) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_accelJointCycloidalNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, angle, time);
    return retval;
}

int CLinkbotI::driveAccelCycloidalNB(double radius, double distance, double time) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_driveAccelCycloidalNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, radius, distance, time);
    return retval;
}

/*Harmonic acceleration*/
int CLinkbotI::accelJointHarmonicNB(int id, double angle, double time) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_accelJointHarmonicNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, angle, time);
    return retval;
}

int CLinkbotI::driveAccelHarmonicNB(double radius, double distance, double time) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_driveAccelHarmonicNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, radius, distance, time);
    return retval;
}


int CLinkbotI::driveAccelToVelocityNB(double radius, double acceleration, double velocity) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_driveAccelToVelocityNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, radius, acceleration, velocity);
    return retval;
}
int CLinkbotI::driveAccelToMaxSpeedNB(double radius, double acceleration) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_driveAccelToMaxSpeedNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, radius, acceleration);
    return retval;
}

int CLinkbotI::driveAccelDistanceNB(double radius, double acceleration, double distance) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_driveAccelDistanceNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, radius, acceleration, distance);
    return retval;
}

int CLinkbotI::accelJointTimeNB(int id, double acceleration, double time) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_accelJointTimeNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, acceleration, time);
    return retval;
}
int CLinkbotI::accelJointToVelocityNB(int id, double acceleration, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_accelJointToVelocityNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, acceleration, speed);
    return retval;
}
int CLinkbotI::accelJointToMaxSpeedNB(int id, double acceleration) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_accelJointToMaxSpeedNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, acceleration);
    return retval;
}
int CLinkbotI::accelJointAngleNB(int id, double acceleration, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_accelJointAngleNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, acceleration, angle);
    return retval;
}
int CLinkbotI::accelJointSmoothNB(int id, double accel0, double accelf, double vmax, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_accelJointSmoothNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, accel0, accelf, vmax, angle);
    return retval;
}
int CLinkbotI::driveAccelSmoothNB(double radius, double accel0, double accelf, double vmax, double distance) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_driveAccelSmoothNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, radius, accel0, accelf, vmax, distance);
    return retval;
}

int CLinkbotI::blinkLED(double delay, int numBlinks) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_blinkLED_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, delay, numBlinks);
    return retval;
}
int CLinkbotI::connect() {
    /*void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_connect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;*/
    return 0;
}
int CLinkbotI::connectWithAddress(char *address, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int channel = -1;
    va_start(ap, address);
  
    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_connectWithAddress_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      channel = va_arg(ap, int);
      dlrunfun(fptr, &retval, connectWithAddress, this, address, channel);
    } else {
      dlrunfun(fptr, &retval, connectWithAddress, this, address);
    }
    va_end(ap);
    return retval;
}
int CLinkbotI::connectWithIPAddress(char *address, ...) {
    void *fptr;
    int retval;
    va_list ap;
    char* port = NULL;
    va_start(ap, address);

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_connectWithIPAddress_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      port = va_arg(ap, char*);
      dlrunfun(fptr, &retval, connectWithIPAddress, this, address, port);
    } else {
      dlrunfun(fptr, &retval, connectWithIPAddress, this, address);
    }
    va_end(ap);
    return retval;
}
int CLinkbotI::connectWithSerialID(char *address) {
    void *fptr;
    int retval;
    va_list ap;
    char* port = NULL;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_connectWithSerialID_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, connectWithSerialID, this, address);
    return retval;
}
int CLinkbotI::delaySeconds(int seconds) {
    void *fptr;
    int retval;
    va_list ap;
    char* port = NULL;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "delaySeconds_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, seconds);
    return retval;
}

//new

int CLinkbotI::delay(unsigned int milliseconds) {
    void *fptr;
    int retval;
    va_list ap;
    char* port = NULL;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "delay_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, milliseconds);
    return retval;
}

int CLinkbotI::disconnect() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_disconnect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, disconnect, this);
    return retval;
}
int CLinkbotI::disableButtonCallback() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_disableButtonCallback_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}
int CLinkbotI::disableRecordDataShift() {
    int retval;
    
    DEPRECATED("disableRecordDataShift", "recordNoDataShift");
    retval=this->recordNoDataShift();
    return retval;
}
int CLinkbotI::recordNoDataShift() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_disableRecordDataShift_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
    
    }

int CLinkbotI::driveToDirect(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_driveToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToDirect, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotI::driveTo(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_driveTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveTo, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotI::jumpTo(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_jumpTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotI::jumpToNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_jumpToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotI::jumpJointTo(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_jumpJointTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, angle);
    return retval;
}
int CLinkbotI::jumpJointToNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_jumpJointToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, angle);
    return retval;
}
int CLinkbotI::moveToByTrackPos(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_moveToByTrackPos_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotI::moveToByTrackPosNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_moveToByTrackPosNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotI::moveJointToByTrackPos(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_moveJointToByTrackPos_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, angle);
    return retval;
}
int CLinkbotI::moveJointToByTrackPosNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_moveJointToByTrackPosNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, angle);
    return retval;
}
int CLinkbotI::driveToDirectNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_driveToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToDirectNB, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotI::driveToNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_driveToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToNB, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotI::enableButtonCallback(void* userdata, void (*buttonCallback)(void* userdata, int button, int buttonDown)) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_enableButtonCallback_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, userdata, buttonCallback);
    return retval;
}
int CLinkbotI::enableRecordDataShift() {
    int retval;
    
    DEPRECATED("enableRecordDataShift", "recordDataShift");
    
    retval = this->recordDataShift();
    return retval;
}

int CLinkbotI::recordDataShift() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_enableRecordDataShift_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
    
}

int CLinkbotI::getAccelerometerData(double & x, double & y, double & z) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_getAccelerometerData_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &x, &y, &z);
    return retval;
}
int CLinkbotI::getBatteryVoltage(double & voltage) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_getBatteryVoltage_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &voltage);
    return retval;
}
int CLinkbotI::analogRead(int pin) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_analogRead_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, pin);
    return retval;
}

double CLinkbotI::analogReadVolts(int pin) {
    void *fptr;
    double retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_analogReadVolts_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, pin);
    return retval;
}

int CLinkbotI::digitalRead(int pin) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_digitalRead_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, pin);
    return retval;
}
int CLinkbotI::getColorRGB(int & r, int & g, int & b) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_getColorRGB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &r, &g, &b);
    return retval;
}
int CLinkbotI::getColor(string_t & color) { 
	int retval; 
	char color1[25];
	
	retval = getColorName(color1);
	color = color1; 
	return retval; 
} 
int CLinkbotI::getColorName(char color[]) { 
	void *fptr; 
	int retval; 

	fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_getColorName_chdl"); 
	if(fptr == NULL) { 
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror()); 
		return -1; 
	}    
	dlrunfun(fptr, &retval, NULL, this, color); 
	return retval; 
}
//new
int CLinkbotI::getLEDColorRGB(int & r, int & g, int & b) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_getLEDColorRGB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &r, &g, &b);
    return retval;
}
int CLinkbotI::getLEDColor(string_t & color) { 
	int retval; 
	char color1[25];
	
	retval = getLEDColorName(color1);
	color = color1; 
	return retval; 
} 
int CLinkbotI::getLEDColorName(char color[]) { 
	void *fptr; 
	int retval; 

	fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_getLEDColorName_chdl"); 
	if(fptr == NULL) { 
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror()); 
		return -1; 
	}    
	dlrunfun(fptr, &retval, NULL, this, color); 
	return retval; 
}
//end new
int CLinkbotI::getDistance(double &distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_getDistance_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &distance, radius);
    return retval;
}
int CLinkbotI::getFormFactor(int & formFactor) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_getFormFactor_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &formFactor);
    return retval;
}
int CLinkbotI::getJointAngle(int id, double & angle, ...) {
    void *fptr;
    int retval;
    int numReadings;
    va_list ap;
    va_start(ap, angle);

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_getJointAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      numReadings = va_arg(ap, int);
      dlrunfun(fptr, &retval, NULL, this, id, &angle, numReadings);
    } else {
      dlrunfun(fptr, &retval, NULL, this, id, &angle);
    }
    va_end(ap);
    return retval;
}
int CLinkbotI::getJointAngleInstant(int id, double & angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_getJointAngleInstant_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &angle);
    return retval;
}
int CLinkbotI::getJointAngleAverage(int id, double & angle, ...) {
    void *fptr;
    int retval;
    int numReadings;
    va_list ap;
    va_start(ap, angle);

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_getJointAngleAverage_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      numReadings = va_arg(ap, int);
      dlrunfun(fptr, &retval, NULL, this, id, &angle, numReadings);
    } else {
      dlrunfun(fptr, &retval, NULL, this, id, &angle);
    }
    va_end(ap);
    return retval;
}
int CLinkbotI::getJointAngles(double &angle1, double &angle2, double &angle3, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int numReadings;
    va_start(ap, angle3);

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_getJointAngles_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      numReadings = va_arg(ap, int);
      dlrunfun(fptr, &retval, NULL, this, &angle1, &angle2, &angle3, numReadings);
    } else {
      dlrunfun(fptr, &retval, NULL, this, &angle1, &angle2, &angle3);
    }
    va_end(ap);
    return retval;
}
int CLinkbotI::getJointAnglesInstant(double &angle1, double &angle2, double &angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_getJointAnglesInstant_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &angle1, &angle2, &angle3);
    return retval;
}
int CLinkbotI::getJointAnglesAverage(double &angle1, double &angle2, double &angle3, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int numReadings;
    va_start(ap, angle3);

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_getJointAnglesAverage_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      numReadings = va_arg(ap, int);
      dlrunfun(fptr, &retval, NULL, this, &angle1, &angle2, &angle3, numReadings);
    } else {
      dlrunfun(fptr, &retval, NULL, this, &angle1, &angle2, &angle3);
    }
    va_end(ap);
    return retval;
}
int CLinkbotI::getJointMaxSpeed(int id, double & speed) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_getJointMaxSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &speed);
    return retval;
}
int CLinkbotI::getJointSafetyAngle(double & angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_getJointSafetyAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &angle);
    return retval;
}
int CLinkbotI::getJointSafetyAngleTimeout(double & seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_getJointSafetyAngleTimeout_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &seconds);
    return retval;
}
int CLinkbotI::getJointSpeed(int id, double & speed) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_getJointSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &speed);
    return retval;
}
int CLinkbotI::getJointSpeeds(double &speed1, double &speed2, double &speed3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_getJointSpeeds_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &speed1, &speed2, &speed3);
    return retval;
}
int CLinkbotI::getJointSpeedRatio(int id, double & ratio) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_getJointSpeedRatio_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &ratio);
    return retval;
}
int CLinkbotI::getJointSpeedRatios(double &ratio1, double &ratio2, double &ratio3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_getJointSpeedRatios_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &ratio1, &ratio2, &ratio3);
    return retval;
}
int CLinkbotI::getJointState(int id, int & state) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_getJointState_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &state);
    return retval;
}
int CLinkbotI::isConnected() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_isConnected_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isConnected, this);
    return retval;
}
int CLinkbotI::isMoving() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_isMoving_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isMoving, this);
    return retval;
}


int CLinkbotI::isNotMoving() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_isMoving_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isMoving, this);
    return !retval;
    
}

int CLinkbotI::motionDistance(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_motionDistance_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionDistance, this, distance, radius);
    return retval;
}
int CLinkbotI::motionDistanceNB(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_motionDistanceNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionDistanceNB, this, distance, radius);
    return retval;
}
int CLinkbotI::motionRollBackward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_motionRollBackward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollBackward, this, angle);
    return retval;
}
int CLinkbotI::motionRollBackwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_motionRollBackwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollBackwardNB, this, angle);
    return retval;
}
int CLinkbotI::motionRollForward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_motionRollForward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollForward, this, angle);
    return retval;
}
int CLinkbotI::motionRollForwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_motionRollForwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollForwardNB, this, angle);
    return retval;
}
int CLinkbotI::motionTurnLeft(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_motionTurnLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnLeft, this, angle);
    return retval;
}
int CLinkbotI::motionTurnLeftNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_motionTurnLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnLeftNB, this, angle);
    return retval;
}
int CLinkbotI::motionTurnRight(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_motionTurnRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnRight, this, angle);
    return retval;
}
int CLinkbotI::motionTurnRightNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_motionTurnRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnRightNB, this, angle);
    return retval;
}
int CLinkbotI::motionWait() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_motionWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionWait, this);
    return retval;
}
int CLinkbotI::move(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_move_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, move, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotI::moveNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_moveNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveNB, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotI::moveBackward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_moveBackward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveBackward, this, angle);
    return retval;
}
int CLinkbotI::moveBackwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_moveBackwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveBackwardNB, this, angle);
    return retval;
}
int CLinkbotI::moveContinuousNB(int dir1, int dir2, int dir3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_moveContinuousNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveContinuousNB, this, dir1, dir2, dir3);
    return retval;
}
int CLinkbotI::moveContinuousTime(int dir1, int dir2, int dir3, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_moveContinuousTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveContinuousTime, this, dir1, dir2, dir3, seconds);
    return retval;
}
int CLinkbotI::moveDistance(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_moveDistance_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveDistance, this, distance, radius);
    return retval;
}
int CLinkbotI::moveDistanceNB(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_moveDistanceNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveDistanceNB, this, distance, radius);
    return retval;
}
int CLinkbotI::moveForward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_moveForward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveForward, this, angle);
    return retval;
}
int CLinkbotI::moveForwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_moveForwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveForwardNB, this, angle);
    return retval;
}
int CLinkbotI::moveJointContinuousNB(int id, int dir) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_moveJointContinuousNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointContinuousNB, this, id, dir);
    return retval;
}
int CLinkbotI::moveJointContinuousTime(int id, int dir, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_moveJointContinuousTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointContinuousTime, this, id, dir, seconds);
    return retval;
}
int CLinkbotI::moveJoint(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_moveJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJoint, this, id, angle);
    return retval;
}
int CLinkbotI::moveJointNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_moveJointNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointNB, this, id, angle);
    return retval;
}
int CLinkbotI::moveJointTo(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_moveJointTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointTo, this, id, angle);
    return retval;
}
int CLinkbotI::moveJointToDirect(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_moveJointToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToDirect, this, id, angle);
    return retval;
}
int CLinkbotI::moveJointToNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_moveJointToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToNB, this, id, angle);
    return retval;
}
int CLinkbotI::moveJointToDirectNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_moveJointToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToDirectNB, this, id, angle);
    return retval;
}
int CLinkbotI::moveJointWait(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_moveJointWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointWait, this, id);
    return retval;
}
int CLinkbotI::moveTo(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_moveTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveTo, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotI::moveToDirect(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_moveToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToDirect, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotI::moveToNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_moveToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToNB, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotI::moveToDirectNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_moveToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToDirectNB, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotI::moveToZero() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_moveToZero_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToZero, this);
    return retval;
}
int CLinkbotI::moveToZeroNB() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_moveToZeroNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToZeroNB, this);
    return retval;
}
int CLinkbotI::moveWait() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_moveWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveWait, this);
    return retval;
}
int CLinkbotI::movexy(double x, double y, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_movexy_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, movexy, this, x, y, radius, trackwidth);
    return retval;
}
int CLinkbotI::movexyNB(double x, double y, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_movexyNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, movexyNB, this, x, y, radius, trackwidth);
    return retval;
}
int CLinkbotI::recordAngle(int id, double time[:], double angle[:], int num, double seconds, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int shiftData;
    va_start(ap, seconds);

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_recordAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      shiftData = va_arg(ap, int);
      dlrunfun(fptr, &retval, recordAngle, this, id, time, angle, num, seconds, shiftData);
    } else {
      dlrunfun(fptr, &retval, recordAngle, this, id, time, angle, num, seconds);
    }
    va_end(ap);
    return retval;
}
int CLinkbotI::recordAngleBegin(int id, double* &time, double* &angle, double seconds, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int shiftData = 1;
    va_start(ap, seconds);

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_recordAngleBegin_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      shiftData = va_arg(ap, int);
      dlrunfun(fptr, &retval, NULL, this, id, &time, &angle, seconds, shiftData);
    } else {
      dlrunfun(fptr, &retval, NULL, this, id, &time, &angle, seconds);
    }
    va_end(ap);
    return retval;
}
int CLinkbotI::recordAngleEnd(int id, int &num) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_recordAngleEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &num);
    return retval;
}
int CLinkbotI::recordAngles(double time[:], double angle1[:], double angle2[:], double angle3[:], int num, double seconds, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int shiftData;
    va_start(ap, seconds);

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_recordAngles_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      shiftData = va_arg(ap, int);
      dlrunfun(fptr, &retval, recordAngles, this, time, angle1, angle2, angle3, num, seconds, shiftData);
    } else {
      dlrunfun(fptr, &retval, recordAngles, this, time, angle1, angle2, angle3, num, seconds);
    }
    return retval;
}
int CLinkbotI::recordAnglesBegin(
    double* &time, 
    double* &angle1, 
    double* &angle2, 
    double* &angle3, 
    double seconds,
    ...) 
{
    void *fptr;
    int retval;
    int shiftData;
    va_list ap;
    va_start(ap, seconds);

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_recordAnglesBegin_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      shiftData = va_arg(ap, int);
      dlrunfun(fptr, &retval, NULL, this, 
          &time, 
          &angle1, 
          &angle2, 
          &angle3, 
          seconds, 
          shiftData);
    } else {
      dlrunfun(fptr, &retval, NULL, this, 
          &time, 
          &angle1, 
          &angle2, 
          &angle3, 
          seconds);
    }
    va_end(ap);
    return retval;
}
int CLinkbotI::recordAnglesEnd(int &num) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_recordAnglesEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &num);
    return retval;
}
int CLinkbotI::recordDistanceBegin(double* &time, double* &distance, double radius, double seconds) {
    void *fptr;
    int retval;
    va_list ap;
    int shiftData = 1;
    int id = 1;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_recordDistanceBegin_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    
    dlrunfun(fptr, &retval, NULL, this, id, &time, &distance, radius, seconds, shiftData);
    
    return retval;
}

int CLinkbotI::recordDistanceEnd(int &num) {
    void *fptr;
    int retval;
    int id = 1;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_recordDistanceEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &num);
    return retval;
}
int CLinkbotI::recordDistanceOffset(double distance) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_recordDistanceOffset_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, distance);
    return retval;
}
int CLinkbotI::recordDistancesBegin(
    double* &time, 
    double* &distance1, 
    double* &distance2, 
    double* &distance3, 
    double radius,
    double seconds,
    ...) 
{
    void *fptr;
    int retval;
    int shiftData;
    va_list ap;
    va_start(ap, seconds);

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_recordDistancesBegin_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      shiftData = va_arg(ap, int);
      dlrunfun(fptr, &retval, NULL, this, 
          &time, 
          &distance1, 
          &distance2, 
          &distance3, 
          radius,
          seconds, 
          shiftData);
    } else {
      dlrunfun(fptr, &retval, NULL, this, 
          &time, 
          &distance1, 
          &distance2, 
          &distance3, 
          radius,
          seconds);
    }
    va_end(ap);
    return retval;
}

int CLinkbotI::recordDistancesEnd(int &num) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_recordDistancesEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &num);
    return retval;
}
int CLinkbotI::recordWait() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_recordWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, recordWait, this);
    return retval;
}
int CLinkbotI::reset() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_reset_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, reset, this);
    return retval;
}
int CLinkbotI::resetToZero() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_resetToZero_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, resetToZero, this);
    return retval;
}
int CLinkbotI::resetToZeroNB() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_resetToZeroNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, resetToZeroNB, this);
    return retval;
}

int CLinkbotI::analogWrite(int pin, int value) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_analogWrite_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, analogWrite, this, pin, value);
    return retval;
}

int CLinkbotI::analogReference(int ref) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_analogReference_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, analogReference, this, ref);
    return retval;
}

int CLinkbotI::digitalWrite(int pin, int value) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_digitalWrite_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, digitalWrite, this, pin, value);
    return retval;
}

int CLinkbotI::pinMode(int pin, int mode) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_pinMode_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, pinMode, this, pin, mode);
    return retval;
}

int CLinkbotI::setBuzzerFrequency(int frequency, double time) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_setBuzzerFrequency_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setBuzzerFrequency, this, frequency, time);
    return retval;
}
int CLinkbotI::setBuzzerFrequencyOn(int frequency) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_setBuzzerFrequencyOn_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setBuzzerFrequencyOn, this, frequency);
    return retval;
}
int CLinkbotI::setBuzzerFrequencyOff() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_setBuzzerFrequencyOff_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setBuzzerFrequencyOff, this);
    return retval;
}
int CLinkbotI::setColorRGB(int r, int g, int b) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_setColorRGB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setColorRGB, this, r, g, b);
    return retval;
}
int CLinkbotI::setColor(char color[]) { 
	void *fptr; 
	int retval; 

	fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_setColor_chdl"); 
	if(fptr == NULL) { 
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror()); 
		return -1; 
	}    
	dlrunfun(fptr, &retval, setColor, this, color); 
	return retval; 
}

//new

int CLinkbotI::setLEDColorRGB(int r, int g, int b) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_setLEDColorRGB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setColorRGB, this, r, g, b);
    return retval;
}
int CLinkbotI::setLEDColor(char color[]) { 
	void *fptr; 
	int retval; 

	fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_setLEDColor_chdl"); 
	if(fptr == NULL) { 
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror()); 
		return -1; 
	}    
	dlrunfun(fptr, &retval, setColor, this, color); 
	return retval; 
}

//end new
int CLinkbotI::setExitState(int exitState) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_setExitState_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setExitState, this, exitState);
    return retval;
}
int CLinkbotI::setJointMovementStateNB(int id, int dir) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_setJointMovementStateNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointMovementStateNB, this, id, dir);
    return retval;
}
int CLinkbotI::setJointMovementStateTime(int id, int dir, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_setJointMovementStateTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointMovementStateTime, this, id, dir, seconds);
    return retval;
}
int CLinkbotI::setJointSafetyAngle(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_setJointSafetyAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSafetyAngle, this, angle);
    return retval;
}
int CLinkbotI::setJointSafetyAngleTimeout(double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_setJointSafetyAngleTimeout_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSafetyAngleTimeout, this, seconds);
    return retval;
}
int CLinkbotI::setJointSpeed(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_setJointSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeed, this, id, speed);
    return retval;
}
int CLinkbotI::setJointSpeeds(double speed1, double speed2, double speed3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_setJointSpeeds_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeeds, this, speed1, speed2, speed3);
    return retval;
}
int CLinkbotI::setJointSpeedRatio(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_setJointSpeedRatio_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeedRatio, this, id, speed);
    return retval;
}
int CLinkbotI::setJointSpeedRatios(double ratio1, double ratio2, double ratio3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_setJointSpeedRatios_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, ratio1, ratio2, ratio3);
    return retval;
}
int CLinkbotI::setMotorPower(int id, int power) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_setMotorPower_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMotorPower, this, id, power);
    return retval;
}
int CLinkbotI::setJointPower(int id, double power) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_setJointPower_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointPower, this, id, power);
    return retval;
}
int CLinkbotI::moveJointByPowerNB(int id, double power) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_moveJointByPowerNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointByPowerNB, this, id, power);
    return retval;
}
int CLinkbotI::setMovementStateNB(int dir1, int dir2, int dir3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_setMovementStateNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMovementStateNB, this, dir1, dir2, dir3);
    return retval;
}
int CLinkbotI::setMovementStateTime(int dir1, int dir2, int dir3, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_setMovementStateTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMovementStateTime, this, dir1, dir2, dir3, seconds);
    return retval;
}
int CLinkbotI::setMovementStateTimeNB(int dir1, int dir2, int dir3, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_setMovementStateTimeNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMovementStateTimeNB, this, dir1, dir2, dir3, seconds);
    return retval;
}
int CLinkbotI::setTwoWheelRobotSpeed(double speed, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_setTwoWheelRobotSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setTwoWheelRobotSpeed, this, speed, radius);
    return retval;
}

int CLinkbotI::setSpeed(double speed, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_setTwoWheelRobotSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setSpeed, this, speed, radius);
    return retval;
}
int CLinkbotI::stop() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_stop_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stop, this);
    return retval;
}
int CLinkbotI::stopAllJoints() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_stopAllJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stop, this);
    return retval;
}
int CLinkbotI::stopOneJoint(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_stopOneJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopOneJoint, this, id);
    return retval;
}
int CLinkbotI::systemTime(double &time) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "cmobot_systemTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &time);
    return retval;
}
int CLinkbotI::turnLeft(double angle, double radius, double tracklength) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_turnLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnLeft, this, angle, radius, tracklength);
    return retval;
}
int CLinkbotI::turnLeftNB(double angle, double radius, double tracklength) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_turnLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnLeftNB, this, angle, radius, tracklength);
    return retval;
}
int CLinkbotI::turnRight(double angle, double radius, double tracklength) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_turnRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnRight, this, angle, radius, tracklength);
    return retval;
}
int CLinkbotI::turnRightNB(double angle, double radius, double tracklength) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_turnRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnRightNB, this, angle, radius, tracklength);
    return retval;
}

int CLinkbotI::moveForeverNB() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_moveForeverNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}

int CLinkbotI::moveJointForeverNB(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_moveJointForeverNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id);
    return retval;
}

int CLinkbotI::holdJoints() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_holdJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}
int CLinkbotI::holdJoint(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_holdJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id);
    return retval;
}
int CLinkbotI::holdJointsAtExit() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_holdJointsAtExit_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}
int CLinkbotI::relaxJoints() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_relaxJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}
int CLinkbotI::relaxJoint(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_relaxJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id);
    return retval;
}
int CLinkbotI::driveDistance(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_driveDistance_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, distance, radius);
    return retval;
}
int CLinkbotI::driveDistanceNB(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_driveDistanceNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, distance, radius);
    return retval;
}
int CLinkbotI::driveForward(double angle) {
    int retval;
    
    fprintf(stdout, "Warning: The function \"%s()\" is deprecated. Please use \"%s\"\n",
		"driveForward", "driveAngle(angle)");
    retval = this->driveAngle(angle);
    return retval;
}
int CLinkbotI::driveForwardNB(double angle) {
    int retval;
    
    fprintf(stdout, "Warning: The function \"%s()\" is deprecated. Please use \"%s\"\n",
		"driveForwardNB", "driveAngleNB(angle)");
    retval = this->driveAngleNB(angle);
    return retval;
}
int CLinkbotI::driveBackward(double angle) {
    
    int retval;
    fprintf(stdout, "Warning: The function \"%s()\" is deprecated. Please use \"%s\"\n",
		"driveBackward", "driveAngle(-angle)");
    retval = this->driveAngle(-angle);
    return retval;
}
int CLinkbotI::driveBackwardNB(double angle) {
    
    int retval;
    fprintf(stdout, "Warning: The function \"%s()\" is deprecated. Please use \"%s\"\n",
		"driveBackwardNB", "driveAngleNB(-angle)");
    retval = this->driveAngle(-angle);
    return retval;
    
    /*void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_driveBackwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, angle);
    return retval;*/
}
int CLinkbotI::driveAngle(double angle) {
    
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_driveForward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, angle);
    return retval;
    
}
int CLinkbotI::driveAngleNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_driveForwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, angle);
    return retval;
}
int CLinkbotI::driveTime(double time) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_driveTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, time);
    return retval;
}
int CLinkbotI::driveTimeNB(double time) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_driveTimeNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, time);
    return retval;
}
int CLinkbotI::driveForeverNB() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_driveForeverNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}
int CLinkbotI::drivexy(double x, double y, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_drivexy_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, x, y, radius, trackwidth);
    return retval;
}
int CLinkbotI::drivexyNB(double x, double y, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_drivexyNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, x, y, radius, trackwidth);
    return retval;
}
int CLinkbotI::drivexyTo(double x, double y, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_drivexyTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, x, y, radius, trackwidth);
    return retval;
}

int CLinkbotI::drivexyToExpr(double x0, double xf, int n, char expr[], double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_drivexyToExpr_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, x0, xf, n, expr, radius, trackwidth);
    return retval;
}

int CLinkbotI::drivexyToFunc(double x0, double xf, int n, double(*func)(double x), double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_drivexyToFunc_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, x0, xf, n, func, radius, trackwidth);
    return retval;
}

int CLinkbotI::drivexyToNB(double x, double y, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_drivexyToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, x, y, radius, trackwidth);
    return retval;
}



/* CLinkbotIGroup */


CLinkbotIGroup::CLinkbotIGroup() {
  void *fptr;
  /* Here to load the dynamically loaded library if necessary.
     CMobot::g_chmobot_dlhandle is a global pointer pointing to the loaded DLL
     CMobot::g_chmobot_dlcount is a global int counting instances for all classes
     They are declared in the header file class1_ch.h for Ch space.
     */
  if(CMobot::g_chmobot_dlhandle == NULL || CMobot::g_chmobot_dlcount == 0) {
    CMobot::g_chmobot_dlhandle = dlopen("libmobot.dl", RTLD_LAZY);
    if(CMobot::g_chmobot_dlhandle == NULL) {
      printf("Error: %s(): dlopen(): %s\n", __class_func__, dlerror());
      return;
    }
  }
  /* to get the address by function name */
  fptr = dlsym(CMobot::g_chmobot_dlhandle, "CLinkbotIGroup_CLinkbotIGroup_chdl");
  if(fptr == NULL) {
    printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
    return;
  }
  /* to call the chdl function in dynamically loaded
     library by address */
  dlrunfun(fptr, NULL, NULL);
  CMobot::g_chmobot_dlcount++; // to increase count of instance
}

CLinkbotIGroup::~CLinkbotIGroup() {
  void *fptr;
  fptr = dlsym(CMobot::g_chmobot_dlhandle, "CLinkbotIGroup_dCLinkbotIGroup_chdl");
  if(fptr == NULL) {
    printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
    return;
  }
  /* call the chdl function in DLL by address */
  dlrunfun(fptr, NULL, NULL, this);
  CMobot::g_chmobot_dlcount--; // to decrease count of instance
  if(CMobot::g_chmobot_dlcount <= 0 && CMobot::g_chmobot_dlhandle != NULL) {
    if(dlclose(CMobot::g_chmobot_dlhandle)!=0)
      printf("Error: %s(): dlclose(): %s\n", __class_func__, dlerror());
  }
}

int CLinkbotIGroup::addRobot(CLinkbotI &robot) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_addRobot_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &robot);
    return retval;
}

int CLinkbotIGroup::addRobots(array CLinkbotI robots[], ...)
{
    void *fptr;
    int retval;
    int numRobots;
    va_list ap;
    va_start(ap, robots);

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_addRobots_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      numRobots = va_arg(ap, int);
    } else {
      numRobots = (int)shape(robots);
    }
    dlrunfun(fptr, &retval, NULL, this, robots, numRobots);
    va_end(ap);
    return retval;
}

int CLinkbotIGroup::connect()
{
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_connect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}

int CLinkbotIGroup::driveJointToDirect(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_driveJointToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveJointToDirect, this, id, angle);
    return retval;
}
int CLinkbotIGroup::driveJointToDirectNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_driveJointToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveJointToDirectNB, this, id, angle);
    return retval;
}
int CLinkbotIGroup::driveToDirect(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_driveToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToDirect, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotIGroup::driveTo(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_driveTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveTo, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotIGroup::jumpTo(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_jumpTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotIGroup::jumpToNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_jumpToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotIGroup::jumpJointTo(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_jumpJointTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, angle);
    return retval;
}
int CLinkbotIGroup::jumpJointToNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_jumpJointToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, angle);
    return retval;
}
int CLinkbotIGroup::moveToByTrackPos(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_moveToByTrackPos_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotIGroup::moveToByTrackPosNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_moveToByTrackPosNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotIGroup::moveJointByPowerNB(int id, double power) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_moveJointByPowerNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointByPowerNB, this, id, power);
    return retval;
}
int CLinkbotIGroup::moveJointToByTrackPos(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_moveJointToByTrackPos_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, angle);
    return retval;
}
int CLinkbotIGroup::moveJointToByTrackPosNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_moveJointToByTrackPosNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, angle);
    return retval;
}
int CLinkbotIGroup::driveToDirectNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_driveToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToDirectNB, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotIGroup::driveToNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_driveToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToNB, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotIGroup::isMoving() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_isMoving_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isMoving, this);
    return retval;
}

int CLinkbotIGroup::isNotMoving() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_isMoving_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isMoving, this);
    return !retval;
}

int CLinkbotIGroup::motionDistance(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_motionDistance_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, distance, radius);
    return retval;
}
int CLinkbotIGroup::motionDistanceNB(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_motionDistanceNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionDistanceNB, this, distance, radius);
    return retval;
}
int CLinkbotIGroup::motionRollBackward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_motionRollBackward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollBackward, this, angle);
    return retval;
}
int CLinkbotIGroup::motionRollBackwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_motionRollBackwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollBackwardNB, this, angle);
    return retval;
}
int CLinkbotIGroup::motionRollForward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_motionRollForward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollForward, this, angle);
    return retval;
}
int CLinkbotIGroup::motionRollForwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_motionRollForwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollForwardNB, this, angle);
    return retval;
}
int CLinkbotIGroup::motionTurnLeft(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_motionTurnLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnLeft, this, angle);
    return retval;
}
int CLinkbotIGroup::motionTurnLeftNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_motionTurnLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnLeftNB, this, angle);
    return retval;
}
int CLinkbotIGroup::motionTurnRight(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_motionTurnRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnRight, this, angle);
    return retval;
}
int CLinkbotIGroup::motionTurnRightNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_motionTurnRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnRightNB, this, angle);
    return retval;
}
int CLinkbotIGroup::motionWait() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_motionWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionWait, this);
    return retval;
}
int CLinkbotIGroup::move(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_move_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, move, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotIGroup::moveNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_moveNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveNB, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotIGroup::moveForeverNB() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_moveForeverNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}

int CLinkbotIGroup::moveJointForeverNB(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_moveJointForeverNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id);
    return retval;
}

int CLinkbotIGroup::moveBackward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_moveBackward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveBackward, this, angle);
    return retval;
}
int CLinkbotIGroup::moveBackwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_moveBackwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveBackwardNB, this, angle);
    return retval;
}
int CLinkbotIGroup::moveContinuousNB(int dir1, int dir2, int dir3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_moveContinuousNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveContinuousNB, this, dir1, dir2, dir3);
    return retval;
}
int CLinkbotIGroup::moveContinuousTime(int dir1, int dir2, int dir3, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_moveContinuousTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveContinuousTime, this, dir1, dir2, dir3, seconds);
    return retval;
}
int CLinkbotIGroup::moveDistance(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_moveDistance_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveDistance, this, distance, radius);
    return retval;
}
int CLinkbotIGroup::moveDistanceNB(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_moveDistanceNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveDistanceNB, this, distance, radius);
    return retval;
}
int CLinkbotIGroup::moveForward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_moveForward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveForward, this, angle);
    return retval;
}
int CLinkbotIGroup::moveForwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_moveForwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveForwardNB, this, angle);
    return retval;
}
int CLinkbotIGroup::moveJointContinuousNB(int id, int dir) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_moveJointContinuousNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointContinuousNB, this, id, dir);
    return retval;
}
int CLinkbotIGroup::moveJointContinuousTime(int id, int dir, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_moveJointContinuousTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointContinuousTime, this, id, dir, seconds);
    return retval;
}
int CLinkbotIGroup::moveJointTo(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_moveJointTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointTo, this, id, angle);
    return retval;
}
int CLinkbotIGroup::moveJointToDirect(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_moveJointToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToDirect, this, id, angle);
    return retval;
}
int CLinkbotIGroup::moveJointToNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_moveJointToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToNB, this, id, angle);
    return retval;
}
int CLinkbotIGroup::moveJointToDirectNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_moveJointToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToDirectNB, this, id, angle);
    return retval;
}
int CLinkbotIGroup::moveJointWait(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_moveJointWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointWait, this, id);
    return retval;
}
int CLinkbotIGroup::moveTo(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_moveTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveTo, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotIGroup::moveToDirect(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_moveToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToDirect, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotIGroup::moveToNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_moveToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToNB, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotIGroup::moveToDirectNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_moveToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToDirectNB, this, angle1, angle2, angle3);
    return retval;
}
int CLinkbotIGroup::moveToZero() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_moveToZero_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToZero, this);
    return retval;
}
int CLinkbotIGroup::moveToZeroNB() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_moveToZeroNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToZeroNB, this);
    return retval;
}
int CLinkbotIGroup::moveWait() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_moveWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveWait, this);
    return retval;
}

int CLinkbotIGroup::moveJoint(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_moveJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, angle);
    return retval;
}
int CLinkbotIGroup::moveJointNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_moveJointNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, angle);
    return retval;
}
int CLinkbotIGroup::moveTime(double time) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_moveTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, time);
    return retval;
}
int CLinkbotIGroup::moveTimeNB(double time) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_moveTimeNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, time);
    return retval;
}
int CLinkbotIGroup::moveJointTime(int id, double time) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_moveJointTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, time);
    return retval;
}
int CLinkbotIGroup::moveJointTimeNB(int id, double time) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_moveJointTimeNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, time);
    return retval;
}

int CLinkbotIGroup::reset() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_reset_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, reset, this);
    return retval;
}
int CLinkbotIGroup::resetToZero() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_resetToZero_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, resetToZero, this);
    return retval;
}
int CLinkbotIGroup::resetToZeroNB() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_resetToZeroNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, resetToZeroNB, this);
    return retval;
}
int CLinkbotIGroup::setSpeed(double speed, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_setSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, speed, radius);
    return retval;
}
int CLinkbotIGroup::setExitState(int exitState) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_setExitState_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setExitState, this, exitState);
    return retval;
}
int CLinkbotIGroup::setJointMovementStateNB(int id, int dir) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_setJointMovementStateNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointMovementStateNB, this, id, dir);
    return retval;
}
int CLinkbotIGroup::setJointMovementStateTime(int id, int dir, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_setJointMovementStateTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointMovementStateTime, this, id, dir, seconds);
    return retval;
}
int CLinkbotIGroup::setJointMovementStateTimeNB(int id, int dir, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_setJointMovementStateTimeNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointMovementStateTimeNB, this, id, dir, seconds);
    return retval;
}
int CLinkbotIGroup::setJointSafetyAngle(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_setJointSafetyAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSafetyAngle, this, angle);
    return retval;
}
int CLinkbotIGroup::setJointSafetyAngleTimeout(double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_setJointSafetyAngleTimeout_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSafetyAngleTimeout, this, seconds);
    return retval;
}
int CLinkbotIGroup::setJointSpeed(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_setJointSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeed, this, id, speed);
    return retval;
}
int CLinkbotIGroup::setJointSpeeds(double speed1, double speed2, double speed3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_setJointSpeeds_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeeds, this, speed1, speed2, speed3);
    return retval;
}
int CLinkbotIGroup::setJointSpeedRatio(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_setJointSpeedRatio_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeedRatio, this, id, speed);
    return retval;
}
int CLinkbotIGroup::setJointSpeedRatios(double ratio1, double ratio2, double ratio3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_setJointSpeedRatios_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeedRatios, this, ratio1, ratio2, ratio3);
    return retval;
}
int CLinkbotIGroup::setMovementStateNB(int dir1, int dir2, int dir3) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_setMovementStateNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMovementStateNB, this, dir1, dir2, dir3);
    return retval;
}
int CLinkbotIGroup::setMovementStateTime(int dir1, int dir2, int dir3, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_setMovementStateTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMovementStateTime, this, dir1, dir2, dir3, seconds);
    return retval;
}
int CLinkbotIGroup::setMovementStateTimeNB(int dir1, int dir2, int dir3, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_setMovementStateTimeNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMovementStateTimeNB, this, dir1, dir2, dir3, seconds);
    return retval;
}
int CLinkbotIGroup::setTwoWheelRobotSpeed(double speed, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_setTwoWheelRobotSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setTwoWheelRobotSpeed, this, speed, radius);
    return retval;
}
int CLinkbotIGroup::stopAllJoints() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_stopAllJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopAllJoints, this);
    return retval;
}
int CLinkbotIGroup::stopOneJoint(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_stopOneJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopOneJoint, this, id);
    return retval;
}
int CLinkbotIGroup::turnLeft(double angle, double radius, double tracklength) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_turnLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnLeft, this, angle, radius, tracklength);
    return retval;
}
int CLinkbotIGroup::turnLeftNB(double angle, double radius, double tracklength) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_turnLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnLeftNB, this, angle, radius, tracklength);
    return retval;
}
int CLinkbotIGroup::turnRight(double angle, double radius, double tracklength) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_turnRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnRight, this, angle, radius, tracklength);
    return retval;
}
int CLinkbotIGroup::turnRightNB(double angle, double radius, double tracklength) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_turnRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnRightNB, this, angle, radius, tracklength);
    return retval;
}
int CLinkbotIGroup::holdJoints() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_holdJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}
int CLinkbotIGroup::holdJoint(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_holdJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id);
    return retval;
}
int CLinkbotIGroup::holdJointsAtExit() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_holdJointsAtExit_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}
int CLinkbotIGroup::relaxJoints() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_relaxJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}
int CLinkbotIGroup::relaxJoint(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_relaxJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id);
    return retval;
}
int CLinkbotIGroup::driveTime(double time) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_driveTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, time);
    return retval;
}
int CLinkbotIGroup::driveTimeNB(double time) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_driveTimeNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, time);
    return retval;
}
int CLinkbotIGroup::driveDistance(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_driveDistance_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, distance, radius);
    return retval;
}
int CLinkbotIGroup::driveDistanceNB(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_driveDistanceNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, distance, radius);
    return retval;
}
int CLinkbotIGroup::driveForward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_driveForward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, angle);
    return retval;
}
int CLinkbotIGroup::driveForwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_driveForwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, angle);
    return retval;
}
int CLinkbotIGroup::driveBackward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_driveBackward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, angle);
    return retval;
}
int CLinkbotIGroup::driveBackwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_driveBackwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, angle);
    return retval;
}
int CLinkbotIGroup::driveForeverNB() {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_driveForeverNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}

int CLinkbotIGroup::driveAccelTimeNB(double radius, double acceleration, double time) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_driveAccelTimeNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, radius, acceleration, time);
    return retval;
}

/*Cycloid acceleration*/
int CLinkbotIGroup::accelJointCycloidalNB(int id, double angle, double time) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_accelJointCycloidalNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, angle, time);
    return retval;
}

int CLinkbotIGroup::driveAccelCycloidalNB(double radius, double distance, double time) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_driveAccelCycloidalNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, radius, distance, time);
    return retval;
}

/*Harmonic acceleration*/
int CLinkbotIGroup::accelJointHarmonicNB(int id, double angle, double time) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_accelJointHarmonicNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, angle, time);
    return retval;
}

int CLinkbotIGroup::driveAccelHarmonicNB(double radius, double distance, double time) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_driveAccelHarmonicNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, radius, distance, time);
    return retval;
}


int CLinkbotIGroup::driveAccelToVelocityNB(double radius, double acceleration, double velocity) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_driveAccelToVelocityNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, radius, acceleration, velocity);
    return retval;
}
int CLinkbotIGroup::driveAccelToMaxSpeedNB(double radius, double acceleration) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_driveAccelToMaxSpeedNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, radius, acceleration);
    return retval;
}

int CLinkbotIGroup::driveAccelDistanceNB(double radius, double acceleration, double distance) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_driveAccelDistanceNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, radius, acceleration, distance);
    return retval;
}

int CLinkbotIGroup::accelJointTimeNB(int id, double acceleration, double time) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_accelJointTimeNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, acceleration, time);
    return retval;
}
int CLinkbotIGroup::accelJointToVelocityNB(int id, double acceleration, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_accelJointToVelocityNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, acceleration, speed);
    return retval;
}
int CLinkbotIGroup::accelJointToMaxSpeedNB(int id, double acceleration) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_accelJointToMaxSpeedNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, acceleration);
    return retval;
}
int CLinkbotIGroup::accelJointAngleNB(int id, double acceleration, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_accelJointAngleNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, acceleration, angle);
    return retval;
}
int CLinkbotIGroup::accelJointSmoothNB(int id, double accel0, double accelf, double vmax, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_accelJointSmoothNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, accel0, accelf, vmax, angle);
    return retval;
}
int CLinkbotIGroup::driveAccelSmoothNB(double radius, double accel0, double accelf, double vmax, double distance) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_driveAccelSmoothNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, radius, accel0, accelf, vmax, distance);
    return retval;
}

int CLinkbotIGroup::openGripper(double angle) //angle is in degrees
{
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_openGripper_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, angle);
    return retval;
}

int CLinkbotIGroup::openGripperNB(double angle) 
{
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_openGripperNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, angle);
    return retval;
}

int CLinkbotIGroup::closeGripper(void) 
{
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_closeGripper_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}

int CLinkbotIGroup::closeGripperNB(void) 
{
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "CMGI_closeGripperNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}

/*Functions for compatibilty with RoboSim*/
int CLinkbotI::getxy(double & x, double & y) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_getxy_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &x, &y);
    return retval;
}

int CLinkbotI::line(double x1, double y1, double z1, double x2, double y2, double z2, 
		     int linewidth, char color[]) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_line_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, x1, y1, z1, x2, y2, z2, linewidth, color);
    return retval;
}

int CLinkbotI::movexyTo(double x, double y, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_movexyTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, x, y, radius, trackwidth);
    return retval;
}

int CLinkbotI::movexyToExpr(double x0, double xf, int n, char expr[], double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_movexyToExpr_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, x0, xf, n, expr, radius, trackwidth);
    return retval;
}

int CLinkbotI::movexyToFunc(double x0, double xf, int n, double(*func)(double x), double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_movexyToFunc_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, x0, xf, n, func, radius, trackwidth);
    return retval;
}

int CLinkbotI::movexyToNB(double x, double y, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_movexyToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, x, y, radius, trackwidth);
    return retval;
}

int CLinkbotI::movexyWait(void) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_movexyWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}

int CLinkbotI::point(double x, double y, double z, int linewidth, char color[]) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_point_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, x, y, z, linewidth, color);
    return retval;
}

int CLinkbotI::text(double x, double y, double z, char text[]) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_text_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, x, y, z, text);
    return retval;
}

int CLinkbotI::traceOn(void) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_traceOn_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}

int CLinkbotI::traceOff(void) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_traceOff_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}

int CLinkbotI::recordxyBegin(double x, double y, double timeInterval) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_recordxyBegin_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, x, y, timeInterval);
    return retval;
}

int CLinkbotI::recordxyEnd(int &numpoints) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_recordxyEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &numpoints);
    return retval;
}

/*Gripper functions. Oly for Ch*/
int CLinkbotI::openGripper(double angle) //angle is in degrees
{
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_openGripper_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, angle);
    return retval;
}

int CLinkbotI::openGripperNB(double angle) 
{
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_openGripperNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, angle);
    return retval;
}

int CLinkbotI::closeGripper(void) 
{
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_closeGripper_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}

int CLinkbotI::closeGripperNB(void) 
{
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_closeGripperNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}

int CLinkbotI::moveTime(double time) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_moveTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, time);
    return retval;
}
int CLinkbotI::moveTimeNB(double time) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_moveTimeNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, time);
    return retval;
}

int CLinkbotI::moveJointTime(int id, double time) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_moveJointTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, time);
    return retval;
}

int CLinkbotI::moveJointTimeNB(int id, double time) {
    void *fptr;
    int retval;

    fptr = dlsym(CMobot::g_chmobot_dlhandle, "LinkbotI_moveJointTimeNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, time);
    return retval;
}
    




